#!/usr/bin/env python
import click
import hofx
import hofx.diag
from solo.basic_files import mkdir
from multiprocessing import Pool
from functools import partial

@click.command()
@click.argument('yaml', type=click.Path(exists=True))
@click.option('--nprocs', default=1)
def run_plot(yaml, nprocs):
    """
    run_plot(yaml)
    plots IODA diagnostic files depending on configuration
    takes path to YAML file as input
    """
    config = hofx.configuration.read_yaml(yaml)
    plot_cfg = config['plot']
    # get types of figures to generate for each ob type/variable
    plot_types = plot_cfg['types']
    # get list of observations
    ob_list = plot_cfg['diags']['observations']
    # cycle
    cycle = plot_cfg['cycle']
    # diag dir
    diag_dir = plot_cfg['diags']['diag_dir']
    # stats output dir
    stats_dir = plot_cfg['stats_dir']
    mkdir(stats_dir)
    # plot output dir
    plot_dir = plot_cfg['plot_dir']
    mkdir(plot_dir)
    # use multiprocessing to put each obsspace on its own processor
    p = Pool(processes=nprocs)
    results = p.map(partial(run_mp_plots, diag_dir=diag_dir, plot_types=plot_types,
                           cycle=cycle, plot_dir=plot_dir, stats_dir=stats_dir), ob_list)
    p.close()
    p.join()


def run_mp_plots(ob, diag_dir='./', plot_types=[], stats_dir='./', plot_dir='./', cycle=None):
    var_list = ob['obs space']['simulated variables']
    ob['diag_dir'] = diag_dir
    for var in var_list:
        hofx.diag.statsIODA.gen_statistics(ob, var, cycle, stats_dir)
        for plot in plot_types:
            hofx.diag.plotIODA.gen_diagnostics(ob, var, cycle, plot, plot_dir)



if __name__ == '__main__':
    run_plot()
