#!/usr/bin/env python
import click
import hofx
import hofx.diag
from solo.basic_files import mkdir

@click.command()
@click.argument('yaml', type=click.Path(exists=True))
def run_plot(yaml):
    """
    run_plot(yaml)
    plots IODA diagnostic files depending on configuration
    takes path to YAML file as input
    """
    config = hofx.configuration.read_yaml(yaml)
    plot_cfg = config['plot']
    # get types of figures to generate for each ob type/variable
    plot_types = plot_cfg['types']
    # get list of observations
    ob_list = plot_cfg['diags']['observations']
    # cycle
    cycle = plot_cfg['cycle']
    # diag dir
    diag_dir = plot_cfg['diags']['diag_dir']
    # stats output dir
    stats_dir = plot_cfg['stats_dir']
    mkdir(stats_dir)
    # plot output dir
    plot_dir = plot_cfg['plot_dir']
    mkdir(plot_dir)
    # TODO use multiprocessing
    for ob in ob_list:
        # grab variables from the ob['obs space'] dict
        # and call hofx.diag functions to make figures
        # get list of variables
        var_list = ob['obs space']['simulated variables']
        ob['diag_dir'] = diag_dir
        for var in var_list:
            hofx.diag.plotIODA.gen_diagnostics(ob, var, cycle, stats_dir)
            for plot in plot_types:
                hofx.diag.plotIODA.gen_diagnostics(ob, var, cycle, plot, plot_dir)        


if __name__ == '__main__':
    run_plot()
