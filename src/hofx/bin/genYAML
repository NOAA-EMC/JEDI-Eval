#!/usr/bin/env python
import click
import hofx
import os
import datetime as dt
import glob
from solo.template import TemplateConstants, Template
from solo.yaml_file import YAMLFile

@click.command()
@click.argument('task', required=True)
@click.argument('expdir', type=click.Path(exists=True), required=True)
@click.argument('yamlout', required=True)
def gen_yaml(task, expdir, yamlout):
    """
    gen_yaml TASK EXPDIR YAMLOUT
      Generates YAML file for TASK based on configuration YAML files
      in EXPDIR and writes to YAMLOUT

      Note: will use $CDATE environment variable for current cycle information
    """
    # determine the template file
    template_dir = os.path.join(hofx.hofx_directory, 'cfg', 'templates')
    template = os.path.join(template_dir, f'{task}.yaml')
    # get config YAMLs from experiment directory
    configs = glob.glob(os.path.join(expdir,'*.yaml'))
    # get main configuration dictionary
    config = hofx.configuration.read_yaml(configs, template=template)
    config.save(target_dir='./', target_name='working.yaml')
    # compute time dependent variables
    cdate = os.getenv('CDATE', 'YYYYMMDDHH')
    # create a time window object
    if task not in ['hofx']:
        window = hofx.tools.Window(config[task])
    else:
        window = hofx.tools.Window(config)
    win_details = window.details(cdate)
    anl_time = window.analysis_time(cdate)
    bg_time = window.background_time(cdate)
    win_details['current_cycle'] = anl_time
    win_details['background_time'] = bg_time
    win_details['local_current_cycle'] = dt.datetime.strptime(anl_time, '%Y-%m-%dT%H:%M:%SZ').strftime('%Y%m%d.%H%M%S')
    # solo does weird things with certain derived types, forcing to strings
    win_details['window_length'] = f'{window.window_length}'
    win_details['window_offset'] = f'{window.window_offset}'
    win_details['window_type'] = f'{window.window_type}'
    win_details['step_cycle'] = f'{window.step_cycle}'
    win_details['bg_frequency'] = f'{window.bg_frequency}'
    win_details['bg_step'] = f'{window.bg_step}'
    # replace vars in config
    config.update(win_details)
    config = hofx.configuration.update_config(config)
    # clean up output
    config_temp = YAMLFile(template)
    config = hofx.configuration.clean_yaml(config, config_temp)
    # write YAML file out
    target_dir = os.path.dirname(yamlout)
    target_name = os.path.basename(yamlout)
    config.save(target_dir=target_dir, target_name=target_name)
    return config

if __name__ == '__main__':
    _ = gen_yaml()
